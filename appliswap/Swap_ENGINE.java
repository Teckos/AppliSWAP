/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
///////////////
/* TO DO
Auto reconnect
Multithreading -pause - demandes + scans simultanés
*/


package appliswap;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultCaret;
import org.openqa.selenium.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;




/**
 *
 * @author Teckos
 */
public class Swap_ENGINE extends javax.swing.JFrame {
    Statement stm;
    Statement stm1;
    connexion maConnexion;
    connexion1 maConnexion1;
    String LOCAL="OUI";
    //connexion_1 maConnexion_1=new connexion_1();
        ResultSet rs;
    ResultSet rs1;
    WebDriver driver;
    WebDriverWait wait0;
    WebDriverWait wait1;
    Integer temps=500;
    String etat="";
    String IMEI_ORI="";
    String ID="";
    String SUCCES="";
    String SUCCES1="";
    String TYPE_APP="";
    String single="non";
    String type="";
    String nom="";
    String CARTE="default";
    String COMPTE="default";
    String Login0="contact@3rsolutions.fr";
    String Password0="XXXXXXX";
    String Telephone0="XXXXXXXX";
    String Societe0="3R Solutions";
    String Login=Login0;
    String Password=Password0;
    String Telephone=Telephone0;
    String Societe=Societe0;
    String MOTIF="";

    String Carte0nom="Tea Teck Hao";
    String Carte0numero="374906071######";
    String Carte0code="5987";
    String Carte0mois="#credit_select_month > option:nth-child(10)";
    String Carte0annee="#credit_select_year > option:nth-child(5)";
    String Cartenom=Carte0nom;
    String Cartenumero=Carte0numero;
    String Cartecode=Carte0code;
    String Cartemois=Carte0mois;
    String Carteannee=Carte0annee;
    /*String Login0="r.lavergne@spb-services.eu";
    String Password0="Princesse1971=";
    String Telephone0="0134115070";
    String Societe0="SPB S BE";
    String Login=Login0;
    String Password=Password0;
    String Telephone=Telephone0;
    String Societe=Societe0;
    String MOTIF="";

    String Carte0nom="Yann Abitbol";
    String Carte0numero="374990133######";
    String Carte0code="3412";
    String Carte0mois="#credit_select_month > option:nth-child(13)";
    String Carte0annee="#credit_select_year > option:nth-child(5)";*/
    
    
    String IMEI_PREC="";
    
    Integer CPT_total=0;
    Integer CPT_swaps=0;
    Integer CPT_lm=0;
    Integer CPT_imp=0;
    Integer CPT_ech=0;
    
    /**
     * Creates new form NewJFrame
     */
    public Swap_ENGINE() {
        initComponents();
        sendkeys.setEnabled(false);
        //test.setEnabled(false);
        test.setVisible(false);
        testbutton.setVisible(false);
        sendkeys.setVisible(false);
        name.setVisible(false);
        classname.setVisible(false);
        tagname.setVisible(false);
        xpath.setVisible(false);
        partial.setVisible(false);
        css.setVisible(false);
        id.setVisible(false);
        motif1.doClick();
        motif1.setEnabled(false);
        compte0.doClick();
        carte0.doClick();
        login.setText(Login0);
        password.setText(Password0);
        telephone.setText(Telephone0);
        societe.setText(Societe0);
        nom_carte.setText(Carte0nom);
        BDD.doClick();
        BDD_local.doClick();
        //jDesktopPane1.setVisible(true);
         try {
        if (LOCAL.equals("OUI")) {maConnexion1=new connexion1();
            stm=maConnexion1.get_connexion().createStatement();
            }
            else {maConnexion=new connexion();
            stm=maConnexion.get_connexion().createStatement();}
        }
        catch (SQLException e){
            System.err.println(e);
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, e);
        }
        
        DefaultCaret caret = (DefaultCaret)Result.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Bouton_Browser = new javax.swing.JButton();
        Bouton_Test_suite = new javax.swing.JButton();
        IMEI = new javax.swing.JTextField();
        expression = new javax.swing.JTextField();
        name = new javax.swing.JButton();
        id = new javax.swing.JButton();
        classname = new javax.swing.JButton();
        css = new javax.swing.JButton();
        xpath = new javax.swing.JButton();
        tagname = new javax.swing.JButton();
        partial = new javax.swing.JButton();
        Bouton_etape1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Result = new javax.swing.JTextArea();
        expression1 = new javax.swing.JTextField();
        eraselog = new javax.swing.JButton();
        vitesse = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        combotype = new javax.swing.JComboBox();
        test = new javax.swing.JComboBox();
        sendkeys = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        log = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        motif1 = new javax.swing.JRadioButton();
        motif2 = new javax.swing.JRadioButton();
        motif3 = new javax.swing.JRadioButton();
        motif4 = new javax.swing.JRadioButton();
        motif5 = new javax.swing.JRadioButton();
        motif6 = new javax.swing.JRadioButton();
        motif7 = new javax.swing.JRadioButton();
        motif8 = new javax.swing.JRadioButton();
        motif7txt = new javax.swing.JTextField();
        motif8txt = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        carte1 = new javax.swing.JRadioButton();
        carte0 = new javax.swing.JRadioButton();
        nom_carte = new javax.swing.JTextField();
        num_carte = new javax.swing.JPasswordField();
        code_carte = new javax.swing.JTextField();
        annee_carte = new javax.swing.JComboBox();
        mois_carte = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        login = new javax.swing.JTextField();
        compte0 = new javax.swing.JRadioButton();
        compte1 = new javax.swing.JRadioButton();
        password = new javax.swing.JPasswordField();
        telephone = new javax.swing.JTextField();
        societe = new javax.swing.JTextField();
        testbutton = new javax.swing.JButton();
        operateur = new javax.swing.JTextField();
        BDD = new javax.swing.JRadioButton();
        jPanel4 = new javax.swing.JPanel();
        cpt_total = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cpt_swaps = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cpt_lm = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        cpt_imp = new javax.swing.JTextField();
        cpt_ech = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        BDD_local = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("SWAP ENGINE");

        Bouton_Browser.setText("Browser");
        Bouton_Browser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_BrowserActionPerformed(evt);
            }
        });

        Bouton_Test_suite.setText("Demande unique");
        Bouton_Test_suite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_Test_suiteActionPerformed(evt);
            }
        });

        IMEI.setForeground(new java.awt.Color(102, 102, 102));
        IMEI.setToolTipText("IMEI ou numéro de série");
        IMEI.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                IMEIMouseClicked(evt);
            }
        });

        expression.setForeground(new java.awt.Color(102, 102, 102));
        expression.setToolTipText("Expression à tester");
        expression.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expressionActionPerformed(evt);
            }
        });
        expression.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                expressionKeyPressed(evt);
            }
        });

        name.setText("Name");
        name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameActionPerformed(evt);
            }
        });

        id.setText("Id");
        id.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                idComponentHidden(evt);
            }
        });
        id.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idActionPerformed(evt);
            }
        });

        classname.setText("ClassName");
        classname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                classnameActionPerformed(evt);
            }
        });

        css.setText("CSS");
        css.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cssActionPerformed(evt);
            }
        });

        xpath.setText("XPath");
        xpath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                xpathActionPerformed(evt);
            }
        });

        tagname.setText("TagName");
        tagname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagnameActionPerformed(evt);
            }
        });

        partial.setText("PartialLinkText");
        partial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                partialActionPerformed(evt);
            }
        });

        Bouton_etape1.setText("Etape 1");
        Bouton_etape1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bouton_etape1ActionPerformed(evt);
            }
        });

        jButton2.setText("Demandes lot");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        Result.setEditable(false);
        Result.setColumns(20);
        Result.setRows(5);
        Result.setToolTipText("Résultats");
        Result.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                ResultCaretUpdate(evt);
            }
        });
        jScrollPane2.setViewportView(Result);

        expression1.setForeground(new java.awt.Color(102, 102, 102));
        expression1.setText("N° de lot");
        expression1.setToolTipText("Numéro de BL/Nom du log");
        expression1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                expression1MouseClicked(evt);
            }
        });
        expression1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expression1ActionPerformed(evt);
            }
        });

        eraselog.setText("Effacer");
        eraselog.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraselogActionPerformed(evt);
            }
        });

        vitesse.setMaximum(10);
        vitesse.setMinimum(-10);
        vitesse.setPaintLabels(true);
        vitesse.setPaintTicks(true);
        vitesse.setSnapToTicks(true);
        vitesse.setToolTipText("");
        vitesse.setValue(0);
        vitesse.setInverted(true);

        jLabel1.setText("Vitesse");

        combotype.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "IPHONE", "IPAD", "IPOD TOUCH" }));
        combotype.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combotypeActionPerformed(evt);
            }
        });

        test.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "CLICK", "SENDKEYS", "GETTEXT" }));
        test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testActionPerformed(evt);
            }
        });

        sendkeys.setForeground(new java.awt.Color(102, 102, 102));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jLabel2.setText("3.6.3");
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        log.setText("Save log");
        log.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Motifs de réparation"));

        motif1.setText("Écran cassé");
        motif1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motif1ActionPerformed(evt);
            }
        });

        motif2.setText("Perte de connexion Wi-Fi aléatoire");
        motif2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motif2ActionPerformed(evt);
            }
        });

        motif3.setText("La batterie se décharge toute seule");
        motif3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motif3ActionPerformed(evt);
            }
        });

        motif4.setText("Perte de réseau temporaire");
        motif4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motif4ActionPerformed(evt);
            }
        });

        motif5.setText("L'interlocuteur n'entend plus quand je parle");
        motif5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motif5ActionPerformed(evt);
            }
        });

        motif6.setText("Les boutons répondent mal");
        motif6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motif6ActionPerformed(evt);
            }
        });

        motif7.setAlignmentY(0.0F);
        motif7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motif7ActionPerformed(evt);
            }
        });

        motif8.setAlignmentY(0.0F);
        motif8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motif8ActionPerformed(evt);
            }
        });

        motif7txt.setForeground(new java.awt.Color(102, 102, 102));
        motif7txt.setText("Autre motif de réparation");
        motif7txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                motif7txtFocusGained(evt);
            }
        });
        motif7txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motif7txtActionPerformed(evt);
            }
        });

        motif8txt.setForeground(new java.awt.Color(102, 102, 102));
        motif8txt.setText("Autre motif de réparation");
        motif8txt.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                motif8txtFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(motif1)
                            .addComponent(motif5)
                            .addComponent(motif4)
                            .addComponent(motif3)
                            .addComponent(motif2)
                            .addComponent(motif6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(motif7)
                            .addComponent(motif8))
                        .addGap(0, 0, 0)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(motif7txt)
                            .addComponent(motif8txt))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(motif1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motif2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motif3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motif4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motif5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(motif6)
                .addGap(6, 6, 6)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(motif7txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(motif8txt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(motif7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(motif8)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Carte AMERICAN EXPRESS"));

        carte1.setText("Nouvelle carte");
        carte1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carte1MouseClicked(evt);
            }
        });
        carte1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carte1ActionPerformed(evt);
            }
        });

        carte0.setText("Carte par défaut");
        carte0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                carte0MouseClicked(evt);
            }
        });
        carte0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                carte0ActionPerformed(evt);
            }
        });

        nom_carte.setForeground(new java.awt.Color(102, 102, 102));
        nom_carte.setText("Nom du titulaire");
        nom_carte.setToolTipText("Nom du titulaire");
        nom_carte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                nom_carteFocusGained(evt);
            }
        });
        nom_carte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nom_carteActionPerformed(evt);
            }
        });

        num_carte.setForeground(new java.awt.Color(102, 102, 102));
        num_carte.setText("jPasswordField1");
        num_carte.setToolTipText("Numéro de carte");
        num_carte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                num_carteFocusGained(evt);
            }
        });

        code_carte.setForeground(new java.awt.Color(102, 102, 102));
        code_carte.setText("Code");
        code_carte.setToolTipText("Code");
        code_carte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                code_carteFocusGained(evt);
            }
        });
        code_carte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                code_carteActionPerformed(evt);
            }
        });

        annee_carte.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Année", "2015", "2016", "2017", "2018", "2019", "2020", "2021" }));

        mois_carte.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Mois", "Janvier", "Février", "Mars", "Avril", "Mai", "Juin", "Juillet", "Août", "Septembre", "Octobre", "Novembre", "Décembre" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(num_carte)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(code_carte, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(carte0)
                            .addComponent(carte1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(mois_carte, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(annee_carte, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(nom_carte))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(carte0)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(carte1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nom_carte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(num_carte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(code_carte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mois_carte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(annee_carte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Compte APPLE"));

        login.setForeground(new java.awt.Color(102, 102, 102));
        login.setText("Login");
        login.setToolTipText("Login");
        login.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                loginFocusGained(evt);
            }
        });

        compte0.setText("Par défaut");
        compte0.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compte0MouseClicked(evt);
            }
        });
        compte0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compte0ActionPerformed(evt);
            }
        });

        compte1.setText("Autre");
        compte1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compte1MouseClicked(evt);
            }
        });

        password.setForeground(new java.awt.Color(102, 102, 102));
        password.setText("jPasswordField1");
        password.setToolTipText("Password");
        password.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                passwordFocusGained(evt);
            }
        });

        telephone.setForeground(new java.awt.Color(102, 102, 102));
        telephone.setText("Téléphone");
        telephone.setToolTipText("Téléphone");
        telephone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                telephoneFocusGained(evt);
            }
        });

        societe.setForeground(new java.awt.Color(102, 102, 102));
        societe.setText("Société");
        societe.setToolTipText("Société");
        societe.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                societeFocusGained(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(telephone, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(societe))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(compte0)
                        .addGap(18, 18, 18)
                        .addComponent(compte1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(password)
                    .addComponent(login))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compte0)
                    .addComponent(compte1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(login, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(password, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(telephone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(societe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        testbutton.setText("Test");
        testbutton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testbuttonMouseClicked(evt);
            }
        });
        testbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testbuttonActionPerformed(evt);
            }
        });

        operateur.setForeground(new java.awt.Color(102, 102, 102));
        operateur.setText("Opérateur");
        operateur.setToolTipText("Opérateur à attribuer au lot");
        operateur.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                operateurFocusGained(evt);
            }
        });

        BDD.setText("BDD");
        BDD.setToolTipText("Utilisation ou non de la Base de Données");
        BDD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BDDMouseClicked(evt);
            }
        });
        BDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDDActionPerformed(evt);
            }
        });

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Compteurs"));

        jLabel3.setText("TOTAL");

        jLabel4.setText("Swaps");

        jLabel5.setText("LM");

        jLabel6.setText("IMP");

        jLabel7.setText("Echecs");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cpt_total, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(cpt_swaps, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(cpt_lm, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cpt_imp, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cpt_ech, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(2, 2, 2)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cpt_total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpt_swaps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpt_lm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpt_imp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cpt_ech, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        BDD_local.setText("LOCALE");
        BDD_local.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BDD_localMouseClicked(evt);
            }
        });
        BDD_local.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BDD_localActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sendkeys)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(classname)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(partial)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(xpath))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(test, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(testbutton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(id)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(name)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tagname)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(css))
                            .addComponent(expression, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton2)
                                            .addComponent(combotype, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Bouton_Browser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(35, 35, 35)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(expression1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(operateur, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Bouton_etape1)
                                        .addGap(22, 22, 22)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(BDD)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(BDD_local))
                                            .addComponent(Bouton_Test_suite))
                                        .addGap(0, 4, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(log)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(eraselog, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(IMEI, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                            .addComponent(jLabel1)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(vitesse, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(Bouton_Browser)
                                .addComponent(jLabel1)
                                .addComponent(BDD)
                                .addComponent(BDD_local))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(vitesse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(Bouton_etape1)
                                        .addComponent(combotype, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(IMEI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(Bouton_Test_suite)))))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(expression1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(log)
                            .addComponent(eraselog)
                            .addComponent(operateur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(expression, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(id)
                            .addComponent(name)
                            .addComponent(tagname)
                            .addComponent(css)
                            .addComponent(test, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(testbutton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(classname)
                            .addComponent(xpath)
                            .addComponent(partial)
                            .addComponent(sendkeys, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void compte(){
        Login =(login.getText());
        Password =password.getText();
        Telephone=telephone.getText();
        Societe=societe.getText();
            
        
        //Result.append(Login + "  "+Password+"\n");
        //Result.append(Telephone + "  "+Societe+"\n");
        //Result.validate(); 
        //Result.paintImmediately (Result.getBounds ()); 
    }
    
    private void motif(){
        MOTIF="Écran cassé";
        if (motif2.isSelected()) {
            MOTIF+="\nPerte de connexion Wi-Fi aléatoire";
        }
        if (motif3.isSelected()) {
            MOTIF+="\nLa batterie se décharge toute seule";
        }
        if (motif4.isSelected()) {
            MOTIF+="\nPerte de réseau temporaire";
        }
        if (motif5.isSelected()) {
            MOTIF+="\nL'interlocuteur n'entend plus quand je parle";
        }
        if (motif6.isSelected()) {
            MOTIF+="\nLes boutons répondent mal";
        }
        if (motif7.isSelected()) {
            MOTIF+="\n"+motif7txt.getText();
        }
        if (motif8.isSelected()) {
           MOTIF+="\n"+motif8txt.getText();
        }
        
        //Result.append(MOTIF+"\n");
        //Result.validate(); 
        //Result.paintImmediately (Result.getBounds ());
        
    }
    
    private void carte(){
    if (CARTE.equals("default")){
         Cartenom=Carte0nom;
         Cartenumero=Carte0numero;
         Cartecode=Carte0code;
        Cartemois=Carte0mois;
        Carteannee=Carte0annee;
    }
    else {
         Cartenom=nom_carte.getText();
         Cartenumero=num_carte.getText();
         Cartecode=code_carte.getText();
         Cartemois="#credit_select_month > option:nth-child(";
         if (mois_carte.getSelectedItem().equals("Janvier")) {Cartemois+="2)";}
         else if (mois_carte.getSelectedItem().equals("Février")) {Cartemois+="3)";}
         else if (mois_carte.getSelectedItem().equals("Mars")) {Cartemois+="4)";}
         else if (mois_carte.getSelectedItem().equals("Avril")) {Cartemois+="5)";}
         else if (mois_carte.getSelectedItem().equals("Mai")) {Cartemois+="6)";}
         else if (mois_carte.getSelectedItem().equals("Juin")) {Cartemois+="7)";}
         else if (mois_carte.getSelectedItem().equals("Juillet")) {Cartemois+="8)";}
         else if (mois_carte.getSelectedItem().equals("Août")) {Cartemois+="9)";}
         else if (mois_carte.getSelectedItem().equals("Septembre")) {Cartemois+="10)";}
         else if (mois_carte.getSelectedItem().equals("Octobre")) {Cartemois+="11)";}
         else if (mois_carte.getSelectedItem().equals("Novembre")) {Cartemois+="12)";}
         else if (mois_carte.getSelectedItem().equals("Décembre")) {Cartemois+="13)";}
         
         Carteannee="#credit_select_year > option:nth-child(";
         if (annee_carte.getSelectedItem().equals("2015")) {Carteannee+="2)";}
         else if (annee_carte.getSelectedItem().equals("2016")) {Carteannee+="3)";}
         else if (annee_carte.getSelectedItem().equals("2017")) {Carteannee+="4)";}
         else if (annee_carte.getSelectedItem().equals("2018")) {Carteannee+="5)";}
         else if (annee_carte.getSelectedItem().equals("2019")) {Carteannee+="6)";}
         else if (annee_carte.getSelectedItem().equals("2020")) {Carteannee+="7)";}
         else if (annee_carte.getSelectedItem().equals("2021")) {Carteannee+="8)";}
         
    }
     //Result.append(Cartenom+"\n");
     //Result.append(Cartenumero+"\n");
     //Result.append(Cartecode+"\n");
     //Result.append(Cartemois+"\n");
     //Result.append(Carteannee+"\n");
        //Result.validate(); 
        //Result.paintImmediately (Result.getBounds ());
    }          
    
    private void Bouton_BrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_BrowserActionPerformed
        
        fenetre();
    }
    
    private void fenetre(){
        driver = new FirefoxDriver();
        
    }//GEN-LAST:event_Bouton_BrowserActionPerformed

    private void Bouton_Test_suiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_Test_suiteActionPerformed
        
        Integer j=1;
        SUCCES="NON";
        ID="";
        //single="oui";
        
        try {
            driver.findElement(By.cssSelector("#awInput3"));
            System.out.println("J'ai trouvé coname");
            SUCCES="OUI";
        }
        catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e) {
            while ((SUCCES.equals("NON"))&(j<=3)) {
                System.out.println("Je n'ai pas trouvé coname, je relance etape1");
                System.out.println("Tentative : "+j);
                if (combotype.getSelectedItem().equals("IPHONE")){
                    Etape1();
                    type="IPHONE";
                }    
                else if (combotype.getSelectedItem().equals("IPAD")){
                    Etape1_IPAD();
                    type="IPAD";
                }
                else {Etape1_IPOD();
                    type="IPOD";
                }
                j+=1;
            }
        }
        
        
        if (SUCCES.equals("OUI")) {
            etat="";
            IMEI_ORI=IMEI.getText();
            checkLM();
            //single="oui";
            if (etat.equals("")){}
            else {Etape2();}
            }
        else {System.out.println("Connexion au site impossible");
            Result.append(IMEI_ORI+" : Connexion au site impossible\n");
            
        }            
        
        
    }//GEN-LAST:event_Bouton_Test_suiteActionPerformed

    private void classnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_classnameActionPerformed
    String exp = expression.getText();    
    
    String value=sendkeys.getText();
    if (test.getSelectedItem().equals("CLICK")){
            driver.findElement(By.className(exp)).click();
        }
    else if (test.getSelectedItem().equals("SENDKEYS")) {
    driver.findElement(By.className(exp)).sendKeys(value);
    }
    else if (test.getSelectedItem().equals("GETTEXT")) {
        String temp=driver.findElement(By.className(exp)).getText();
        Result.append(exp+" = "+temp+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ());
        }
    
    }//GEN-LAST:event_classnameActionPerformed

    private void cssActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cssActionPerformed
    String exp = expression.getText();    
    String value=sendkeys.getText();
    if (test.getSelectedItem().equals("CLICK")){
            driver.findElement(By.cssSelector(exp)).click();
        }
    else if (test.getSelectedItem().equals("SENDKEYS")) {
    driver.findElement(By.cssSelector(exp)).sendKeys(value);
    }
    else if (test.getSelectedItem().equals("GETTEXT")) {
        String temp=driver.findElement(By.cssSelector(exp)).getText();
        Result.append(exp+" = "+temp+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ());
        }
    }//GEN-LAST:event_cssActionPerformed

    private void xpathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_xpathActionPerformed
    String exp = expression.getText();    
    String value=sendkeys.getText();
    if (test.getSelectedItem().equals("CLICK")){
            driver.findElement(By.xpath(exp)).click();
        }
    else if (test.getSelectedItem().equals("SENDKEYS")) {
    driver.findElement(By.xpath(exp)).sendKeys(value);
    }
    else if (test.getSelectedItem().equals("GETTEXT")) {
        String temp=driver.findElement(By.xpath(exp)).getText();
        Result.append(exp+" = "+temp+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ());
        }
    }//GEN-LAST:event_xpathActionPerformed

    private void partialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_partialActionPerformed
    String exp = expression.getText();    
    String value=sendkeys.getText();
    if (test.getSelectedItem().equals("CLICK")){
            driver.findElement(By.partialLinkText(exp)).click();
        }
    else if (test.getSelectedItem().equals("SENDKEYS")) {
    driver.findElement(By.partialLinkText(exp)).sendKeys(value);
    }
    else if (test.getSelectedItem().equals("GETTEXT")) {
        String temp=driver.findElement(By.partialLinkText(exp)).getText();
        Result.append(exp+" = "+temp+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ());
        }
    }//GEN-LAST:event_partialActionPerformed

    private void idActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idActionPerformed
    String exp = expression.getText();
    String value=sendkeys.getText();
    if (test.getSelectedItem().equals("CLICK")){
            driver.findElement(By.id(exp)).click();
        }
    else if (test.getSelectedItem().equals("SENDKEYS")) {
    driver.findElement(By.id(exp)).sendKeys(value);
    }
    else if (test.getSelectedItem().equals("GETTEXT")) {
        String temp=driver.findElement(By.id(exp)).getText();
        Result.append(exp+" = "+temp+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ());
        }
    }//GEN-LAST:event_idActionPerformed

    private void tagnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagnameActionPerformed
    String exp = expression.getText();    
    String value=sendkeys.getText();
    if (test.getSelectedItem().equals("CLICK")){
            driver.findElement(By.tagName(exp)).click();
        }
    else if (test.getSelectedItem().equals("SENDKEYS")) {
    driver.findElement(By.tagName(exp)).sendKeys(value);
    }
    else if (test.getSelectedItem().equals("GETTEXT")) {
        String temp=driver.findElement(By.tagName(exp)).getText();
        Result.append(exp+" = "+temp+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ());
        }
    }//GEN-LAST:event_tagnameActionPerformed

    private void nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameActionPerformed
    String exp = expression.getText();    
    String value=sendkeys.getText();
    if (test.getSelectedItem().equals("CLICK")){
            driver.findElement(By.name(exp)).click();
        }
    else if (test.getSelectedItem().equals("SENDKEYS")) {
    driver.findElement(By.name(exp)).sendKeys(value);
    }
    else if (test.getSelectedItem().equals("GETTEXT")) {
        String temp=driver.findElement(By.name(exp)).getText();
        Result.append(exp+" = "+temp+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ());
        }
    }//GEN-LAST:event_nameActionPerformed

    private void Etape1() {
     browser();
     System.out.println("Début étape1 ");
     try {
         
        /*wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();*/
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("li.awanimateclass8:nth-child(1) > div:nth-child(1) > button:nth-child(1)")));   
        driver.findElement(By.cssSelector("li.awanimateclass8:nth-child(1) > div:nth-child(1) > button:nth-child(1)")).click();
        try {
                Thread.sleep(temps);}
                catch (InterruptedException e) {
                }
        /*wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#SC0022 > div.dynTxt.malign")));
        driver.findElement(By.cssSelector("#SC0022 > div.dynTxt.malign")).click();*/
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("li.awanimateclass7:nth-child(8) > div:nth-child(1) > button:nth-child(1)")));
        driver.findElement(By.cssSelector("li.awanimateclass7:nth-child(8) > div:nth-child(1) > button:nth-child(1)")).click();
       
        //wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("ul#dataList1.prdDetailsList li:nth-child(2n)")));
        /*wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#dataList1 > li:nth-child(1) > a:nth-child(1)")));
        driver.findElement(By.cssSelector("#dataList1 > li:nth-child(1) > a:nth-child(1)")).click();*/
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("ul.ng-scope > li:nth-child(1) > div:nth-child(1) > button:nth-child(1)")));
        driver.findElement(By.cssSelector("ul.ng-scope > li:nth-child(1) > div:nth-child(1) > button:nth-child(1)")).click();
        
        
         try {
                Thread.sleep(temps);}
                catch (InterruptedException e) {
                }
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".iosd-button-block > button:nth-child(1)")));
        driver.findElement(By.cssSelector(".iosd-button-block > button:nth-child(1)")).click();
        
        
        /*wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));
        driver.findElement(By.cssSelector("#orc")).click();*/
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("li.awanimateclass39:nth-child(1) > div:nth-child(1) > button:nth-child(1)")));
        driver.findElement(By.cssSelector("li.awanimateclass39:nth-child(1) > div:nth-child(1) > button:nth-child(1)")).click();
        
        //wait0.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[@id='Écran fissuré']/div")));
        /* try {
                Thread.sleep(temps);}
                catch (InterruptedException e) {
                }*/
        //wait0.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[@id='Écran fissuré']/div")));
        //driver.findElement(By.xpath("//li[@id='Écran fissuré']/div")).click();
        //wait0.until(ExpectedConditions.elementToBeClickable(By.id("coname")));
        wait0.until(ExpectedConditions.presenceOfElementLocated(By.partialLinkText("désactiver l’option Localiser mon")));
        driver.findElement(By.cssSelector("#awInput3")).clear();
        
        SUCCES="OUI";
     }
     catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e){
         System.out.println("Echec étape 1 : "+e);
         System.out.println("SUCCES : "+SUCCES);
       
         SUCCES="NON";
        
     }
     System.out.println("Fin étape1 | SUCCES : "+SUCCES);
    }
    
     private void Etape1_IPAD() {
     browser_IPAD();
     try {
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#SC0113 > div.dynTxt.malign")));
        driver.findElement(By.cssSelector("#SC0113 > div.dynTxt.malign")).click();
       
        //wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#dataList1 > li:nth-child(4)")));
        //driver.findElement(By.cssSelector("#dataList1 > li:nth-child(4)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.partialLinkText("Écran fissuré")));
        driver.findElement(By.partialLinkText("Écran fissuré")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".declineContainer2 > button:nth-child(1)")));
        driver.findElement(By.cssSelector(".declineContainer2 > button:nth-child(1)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();
        
        wait0.until(ExpectedConditions.presenceOfElementLocated(By.partialLinkText("désactiver l’option Localiser mon")));
        driver.findElement(By.id("coname")).clear();
        
        SUCCES="OUI";
     }
     catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e){
         System.out.println("Echec étape 1 : "+e);
         System.out.println("SUCCES : "+SUCCES);
       
         SUCCES="NON";
     }
     }
     
     private void Etape1_IPOD() {
     browser_IPOD();
     try {
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#SC0114 > div.clr.ht72 > img")));
        driver.findElement(By.cssSelector("#SC0114 > div.clr.ht72 > img")).click();
       
        //wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#dataList1 > li:nth-child(5)")));
        //driver.findElement(By.cssSelector("#dataList1 > li:nth-child(5)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.partialLinkText("Écran fissuré")));
        driver.findElement(By.partialLinkText("Écran fissuré")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector(".declineContainer2 > button:nth-child(1)")));
        driver.findElement(By.cssSelector(".declineContainer2 > button:nth-child(1)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#orc")));   
        driver.findElement(By.cssSelector("#orc")).click();
        
       wait0.until(ExpectedConditions.presenceOfElementLocated(By.partialLinkText("désactiver l’option Localiser mon")));
        driver.findElement(By.id("coname")).clear();
     }
     catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e){
         System.out.println("Echec étape 1 : "+e);
         System.out.println("SUCCES : "+SUCCES);
       
         SUCCES="NON";
     }
     }
    
    
    private void Bouton_etape1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bouton_etape1ActionPerformed
        //Integer j=1;
        //SUCCES="NON";
        //        while ((SUCCES.equals("NON"))&(j<=3)) {
                
        //        System.out.println("Tentative : "+j);
        if (combotype.getSelectedItem().equals("IPHONE")){
            Etape1();
            type="IPHONE";
        }    
        else if (combotype.getSelectedItem().equals("IPAD")){
            Etape1_IPAD();
            type="IPAD";
        }
        else {Etape1_IPOD();
            type="IPOD";
        }
        
        //        j+=1;
        //        }
       
        
    }//GEN-LAST:event_Bouton_etape1ActionPerformed

    private void checkLM(){
        //String imei = IMEI.getText();
        etat="";
        String errorMsg="";
        String errorMsg1="";
        wait0.until(ExpectedConditions.elementToBeClickable(By.id("coname")));
        WebElement element = driver.findElement(By.id("coname"));
        element.clear();
        element.sendKeys(IMEI_ORI);
        driver.findElement(By.id("getCovInfo")).click();
        
        try {
            if (type.equals("IPHONE")) {
                wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#Écran\\ fissuré > div:nth-child(1)")));
                driver.findElement(By.cssSelector("#Écran\\ fissuré > div:nth-child(1)")).click();
                
            }
            else {
                wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.selectCountry")));
            }
            etat="Swappable";
                System.out.println(IMEI_ORI+" : Swappable");
                Result.append(IMEI_ORI+" : Swappable\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); 
         }
        catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e){
            try {
                
                System.out.println(IMEI_ORI+" : Check 2");
                WebElement element1 = driver.findElement(By.partialLinkText("désactiver l’option Localiser mon"));
                etat="Localisé";
                System.out.println(IMEI_ORI+" : Localisé");
                Result.append(IMEI_ORI+" : Localisé\n"+"\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); 
            }
            catch (NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e1){
                try {
                    System.out.println(IMEI_ORI+" : Check 3");
                    WebElement element2=driver.findElement(By.cssSelector("#errorMsg"));
                    errorMsg=element2.getText();
                    
                    if (errorMsg.contains("ce numéro de série n’est pas valide")){
                        errorMsg="ce numéro de série n’est pas valide";
                        etat="Incorrect";
                        
                    }
                    else if (errorMsg.contains("Nos données indiquent que ce produit a été remplacé")){
                        errorMsg="ce produit a déjà été remplacé";
                        etat="Déjà swappé";
                    }
                    else if (errorMsg.contains("ce numéro de série est lié à une réparation ouverte")){
                        errorMsg="ce numéro de série est lié à une réparation ouverte";
                        etat="Réparation ouverte";
                    }
                     else if (errorMsg.contains("Désolé, vous ne pouvez pas configurer la réparation en ligne avec ce numéro")){
                        errorMsg="vous ne pouvez pas configurer la réparation en ligne avec ce numéro";
                        etat="Impossible";
                    }
                    else if (errorMsg.contains("vous pouvez uniquement remplacer les accessoires en ligne")){
                        errorMsg="désolé, vous pouvez uniquement remplacer les accessoires en ligne";
                        etat="Impossible";
                    }
                    else { WebElement element3=driver.findElement(By.cssSelector(".generic_error_message_spacer"));
                            errorMsg1=element3.getText();
                            if (errorMsg1.contains("mais vous ne pouvez pas faire une demande de réparation")) {
                            errorMsg="vous ne pouvez pas configurer la réparation en ligne avec ce numéro";
                            etat="Impossible";
                            
                            }
                            else {
                        errorMsg="Echec";
                        etat="Echec";}
                    //driver.findElement(By.cssSelector("#orc-descby")).click();
                            if (type.equals("IPHONE")) {Etape1();
                            }
                            else if (type.equals("IPAD")){Etape1_IPAD();
                            }
                            else if (type.equals("IPOD")){Etape1_IPOD();
                            }
                            
                    }
                }
                
                
                catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e3){
                etat="Echec";
                System.out.println("#errorMsg non trouvé");
                    errorMsg=etat;
                    if (type.equals("IPHONE")) {Etape1();
                            }
                            else if (type.equals("IPAD")){Etape1_IPAD();
                            }
                            else if (type.equals("IPOD")){Etape1_IPOD();
                            }
                }       
                   
                
                    
                System.out.println(IMEI_ORI+" : "+errorMsg);
                Result.append(IMEI_ORI+" : "+errorMsg+"\n"+"\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); 
            } 
            catch (TimeoutException e1){
                etat="Non";
                System.out.println(IMEI_ORI+" : Délai dépassé");
                Result.append(IMEI_ORI+" : Délai dépassé\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); 
            } 
        }
    }
    private void demande_rep() {
       
        String UPS="";
        try {
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.selectCountry")));
        driver.findElement(By.cssSelector("div.selectCountry")).click();
        //Result.append(IMEI_ORI+" : Déconnexion BDD : "+single+"\n");
        //Result.validate(); 
        //Result.paintImmediately (Result.getBounds ());
        try {
        WebElement login = driver.findElement(By.cssSelector("input#accountname.input-text"));
            //System.out.println("Missing account");
            compte();
            login.clear();
            login.sendKeys(Login);
            
            driver.findElement(By.cssSelector("input#accountpassword")).clear();
            driver.findElement(By.cssSelector("input#accountpassword")).sendKeys(Password);
            driver.findElement(By.id("signInHyperLink")).click();
            
        }
        catch (NoSuchElementException e) {
            //System.out.println("Already logged in");
        }
    
        
        wait0.until(ExpectedConditions.presenceOfElementLocated(By.id("details_textarea")));
        motif();
        driver.findElement(By.id("details_textarea")).sendKeys(MOTIF);
        driver.findElement(By.cssSelector("div.btn_fix_wrapper > button.full_article_btn.blue_button")).click();
        
        try {
        Thread.sleep(temps*4);}
        catch (InterruptedException e) {
        }
        
        try {
            wait0.until(ExpectedConditions.presenceOfElementLocated(By.id("lbl_phone")));
            try {
        Thread.sleep(temps*2);}
        catch (InterruptedException e) {
        }
            
            driver.findElement(By.id("lbl_phone")).clear();
            driver.findElement(By.id("lbl_phone")).sendKeys(Telephone);
        
            driver.findElement(By.id("lbl_company")).clear();
            driver.findElement(By.id("lbl_company")).sendKeys(Societe);
            
            driver.findElement(By.id("lbl_apt")).clear();
            driver.findElement(By.id("lbl_apt")).sendKeys(Societe);
        //System.out.println("Missing phone");
        }
        catch (ElementNotVisibleException e){
        //System.out.println("Phone number already filled");
        }
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#shipping_address_continue > div.btn_fix_wrapper > button.full_article_btn.blue_button")));
        driver.findElement(By.cssSelector("#shipping_address_continue > div.btn_fix_wrapper > button.full_article_btn.blue_button")).click();
        try {
        Thread.sleep(temps*4);}
        catch (InterruptedException e) {
        }
        //driver.findElement(By.id("ship_method_7")).click();
        //driver.findElement(By.cssSelector("#shipping_method_continue > div.btn_fix_wrapper > button.full_article_btn.blue_button")).click();
        if (type.equals("IPAD")){
             try {
                wait1.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#ship_method_8_wrapper > label:nth-child(1) > div:nth-child(2)")));
                driver.findElement(By.cssSelector("#ship_method_8_wrapper > label:nth-child(1) > div:nth-child(2)")).click();
                /*try {
                Thread.sleep(temps*3);}
                catch (InterruptedException e) {
                }*/

                driver.findElement(By.cssSelector("#shipping_method_continue > div.btn_fix_wrapper > button.full_article_btn.blue_button")).click();
                System.out.println(IMEI_ORI+" : Option boîte Apple choisie");
                Result.append(IMEI_ORI+" : Option boîte Apple choisie\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); 
                UPS="Box Apple";

            }
            catch (TimeoutException e){
                
            }
            //manque option boîte Apple
            //#ship_method_8_wrapper > label:nth-child(1) > div:nth-child(2)
        }    
        else {
            try {
                wait1.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#ship_method_container_6 > table:nth-child(3) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > div:nth-child(1) > label:nth-child(1)")));
                driver.findElement(By.cssSelector("#ship_method_container_6 > table:nth-child(3) > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(1) > div:nth-child(1) > label:nth-child(1)")).click();
                /*try {
                Thread.sleep(temps*3);}
                catch (InterruptedException e) {
                }*/

                driver.findElement(By.cssSelector("#shipping_method_continue > div.btn_fix_wrapper > button.full_article_btn.blue_button")).click();
                System.out.println(IMEI_ORI+" : Option UPS disponible");
                Result.append(IMEI_ORI+" : Option UPS disponible\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); 
                UPS="UPS ok";

            }
            catch (TimeoutException e){
                
                System.out.println(IMEI_ORI+" : Option UPS indisponible, boîte APPLE commandée");
                Result.append(IMEI_ORI+" : Option UPS indisponible, boîte APPLE commandée\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); 
                 UPS="Box Apple";
            }
        }
        /*try {
        Thread.sleep(temps*5);}
        catch (InterruptedException e) {
        }*/
        try{
            wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("div.check_box:nth-child(3) > div:nth-child(1) > label:nth-child(1) > div:nth-child(2)")));
            driver.findElement(By.cssSelector("div.check_box:nth-child(3) > div:nth-child(1) > label:nth-child(1) > div:nth-child(2)")).click();
        }
        catch (TimeoutException | NoSuchElementException e){
            System.out.println(IMEI_ORI+" : Echec choix mode d'envoi");
            Result.append(IMEI_ORI+" : Echec choix mode d'envoi\n");
            Result.validate(); 
            Result.paintImmediately (Result.getBounds ()); 
        }
        
        try {
        //wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#terms_conditions_container_1 > div:nth-child(3) > div:nth-child(2) > div:nth-child(1) > label:nth-child(1) > div:nth-child(2)")));
        driver.findElement(By.cssSelector("#terms_conditions_container_1 > div:nth-child(3) > div:nth-child(2) > div:nth-child(1) > label:nth-child(1) > div:nth-child(2)")).click();
      
        }
        catch (ElementNotVisibleException e) {
        driver.findElement(By.cssSelector("#terms_conditions_container_4 > table:nth-child(3) > tbody:nth-child(1) > tr:nth-child(2) > td:nth-child(1) > div:nth-child(1) > label:nth-child(1)")).click();    
            
        }
//driver.findElement(By.cssSelector("#terms_conditions_container_4 > table:nth-child(3) > tbody:nth-child(1) > tr:nth-child(2) > td:nth-child(1) > div:nth-child(1) > label:nth-child(1)")).click();
         //                                 #terms_conditions_container_1 > div:nth-child(3) > div:nth-child(2) > div:nth-child(1) > label:nth-child(1) > div:nth-child(2)
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#terms_conditions_container_5 > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > label:nth-child(1)")));
        /*try {
        Thread.sleep(temps);}
        catch (InterruptedException e) {
        }*/
        driver.findElement(By.cssSelector("#terms_conditions_container_5 > div:nth-child(3) > div:nth-child(1) > div:nth-child(1) > label:nth-child(1)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#terms_continue > div.btn_fix_wrapper > button.full_article_btn.blue_button")));    
        driver.findElement(By.cssSelector("#terms_continue > div.btn_fix_wrapper > button.full_article_btn.blue_button")).click();
        /*try {
        Thread.sleep(temps*4);}
        catch (InterruptedException e) {
        }*/
        //#terms_continue > div:nth-child(1) > button:nth-child(3)
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#billing_address_continue > div.btn_fix_wrapper > button.full_article_btn.blue_button")));
        driver.findElement(By.cssSelector("#billing_address_continue > div.btn_fix_wrapper > button.full_article_btn.blue_button")).click();
        
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#cc_name_text_box")));
        
        try {
        Thread.sleep(temps*3);}
        catch (InterruptedException e) {
        }
        carte();
        driver.findElement(By.cssSelector("#cc_name_text_box")).clear();
        driver.findElement(By.cssSelector("#cc_name_text_box")).sendKeys(Cartenom);
        driver.findElement(By.cssSelector("#credit_text_box")).sendKeys(Cartenumero);        
        driver.findElement(By.cssSelector("#code_text_box")).sendKeys(Cartecode);
        driver.findElement(By.cssSelector(Cartemois)).click();
        driver.findElement(By.cssSelector(Carteannee)).click();
       
        driver.findElement(By.cssSelector("#billing_quote_continue > div:nth-child(1) > button:nth-child(3)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.cssSelector("#review_continue > div:nth-child(1) > button:nth-child(3)")));
        driver.findElement(By.cssSelector("#review_continue > div:nth-child(1) > button:nth-child(3)")).click();
        
        wait0.until(ExpectedConditions.elementToBeClickable(By.partialLinkText("A1")));
        try {
        Thread.sleep(temps*2);}
        catch (InterruptedException e) {
        }
        //String imei = IMEI.getText();
        String nrep = driver.findElement(By.partialLinkText("A1")).getText();
        String temp="";
        
        String prix = driver.findElement(By.cssSelector(".primary > div:nth-child(2)")).getText();
        
        String requete1 ="SELECT * from liste_swap where IMEI_ORI='"+IMEI_ORI+"'";
        try {
            if (LOCAL.equals("OUI")) {stm1=maConnexion1.get_connexion().createStatement();}
            else {stm1=maConnexion.get_connexion().createStatement();}
            
            
        //stm1=maConnexion.get_connexion().createStatement();
        rs1=stm1.executeQuery(requete1);
        while (rs1.next()){
            ID=rs1.getString("ID");
        }
        }
        catch (SQLException e){
            System.err.println(e);
            //java.awt.Toolkit.getDefaultToolkit().beep();
        }
        
        if (ID.equals("")){temp="";}
        else {temp=ID+"  ";}
        System.out.println(temp+IMEI_ORI+" : "+nrep);
        Result.append(IMEI_ORI+" : "+prix+" HT\n");
        Result.append(temp+IMEI_ORI+" : "+nrep+"\n"+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ());
        DefaultCaret caret = (DefaultCaret)Result.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        
        if (single.equals("non")){
            String ope="";
            if ((operateur.getText().equals(""))|(operateur.getText().equals("Opérateur"))){ }
            else { ope=operateur.getText();}
            
            String requete ="INSERT INTO réparation (N_REP, ID, IMEI_NEW, Etat, prix, CodeApple, Opérateur, N_BL) VALUES ('"+nrep+"','"+ID+"','"+ID+"','En attente','0','"+UPS+"','"+ope+"','0')";
        try {
        if (LOCAL.equals("OUI")) {stm1=maConnexion1.get_connexion().createStatement();}
            else {stm1=maConnexion.get_connexion().createStatement();}
        //stm1=maConnexion.get_connexion().createStatement();
        stm1.executeUpdate(requete);}
        catch (SQLException e){
            System.err.println(e);
            //java.awt.Toolkit.getDefaultToolkit().beep();
        }
        }
        
        SUCCES="OUI";
        SUCCES1="OUI";
        }
        catch (TimeoutException | NoSuchElementException | StaleElementReferenceException | ElementNotVisibleException e1){
         System.out.println("Echec demande de réparation : "+e1);
         Result.append(IMEI_ORI+" : Echec demande de réparation\n"+"\n");
         Result.validate(); 
         Result.paintImmediately (Result.getBounds ()); 
         System.out.println("SUCCES : "+SUCCES);
         System.out.println("SUCCES1 : "+SUCCES1);
         System.out.println("");
         
         SUCCES="NON";
         SUCCES1="NON";
         
     }
    }
    
    
    private void liste (){
        Calendar cal = new GregorianCalendar();
        SimpleDateFormat heure_format = new SimpleDateFormat("HH:mm:ss");
        String nomBL=expression1.getText();
        
        try {
            if (LOCAL.equals("OUI")) {stm=maConnexion1.get_connexion().createStatement();}
            else {stm=maConnexion.get_connexion().createStatement();}
            //stm=maConnexion.get_connexion().createStatement();
            rs=stm.executeQuery("Select BL_SPB from liste_swap where (BL_SPB like '%"+nomBL+"%')");
            
            while (rs.next()){
            nom=rs.getString("BL_SPB");
            }
            IMEI_PREC="";
        }
        catch (SQLException e){
            System.err.println(e);
            java.awt.Toolkit.getDefaultToolkit().beep();
        }
        
        String requete ="Select ID, DES, BL_SPB, IMEI_ORI from liste_swap where (BL_SPB like '%"+nomBL+"%') AND (status IN ('Non', 'Echec'))";
        etat="Swappable";
        if (single.equals("oui")) {BDD.doClick(); BDD.update(BDD.getGraphics());; System.out.println(single);}
        
        //DefaultCaret caret = (DefaultCaret)Result.getCaret();
        //caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        try {
            if (LOCAL.equals("OUI")) {stm=maConnexion1.get_connexion().createStatement();}
            else {stm=maConnexion.get_connexion().createStatement();}
            //stm=maConnexion.get_connexion().createStatement();
            rs=stm.executeQuery(requete);
            cpt_total.setText("0");
            cpt_swaps.setText("0");
            cpt_lm.setText("0");
            cpt_imp.setText("0");
            cpt_ech.setText("0");
            
            cpt_total.update(cpt_total.getGraphics());
            cpt_swaps.update(cpt_swaps.getGraphics());
            cpt_lm.update(cpt_lm.getGraphics());
            cpt_imp.update(cpt_imp.getGraphics());
            cpt_ech.update(cpt_imp.getGraphics());
            
//cpt_total.repaint();
            jPanel4.repaint();
            
            CPT_total=0;
            CPT_swaps=0;
            CPT_lm=0;
            CPT_imp=0;
            CPT_ech=0;
            
            Integer i=0;
            String ok="ok";
            String heure = heure_format.format(cal.getTime());
            Result.append(nom+" : Heure de début : "+heure+"\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); 
            
            while((rs.next())&(ok.equals("ok"))){
                i+=1;
                String serie=rs.getString("IMEI_ORI");
                IMEI.setText(serie);
                IMEI_ORI=serie;
                ID = rs.getString("ID");
                TYPE_APP=rs.getString("DES");
                SUCCES="NON";
                Integer l=1;
                if (etat.equals("Swappable")) {
                    while ((SUCCES.equals("NON"))&(l<=3)) {
                    l+=1;
                    if (TYPE_APP.contains("IPOD")){Etape1_IPOD();type="IPOD";Result.append(IMEI_ORI+" : "+TYPE_APP+"\n");
                    Result.validate();
                    Result.paintImmediately (Result.getBounds ()); }
                        else if (TYPE_APP.contains("IPAD")){Etape1_IPAD();type="IPAD";Result.append(IMEI_ORI+" : "+TYPE_APP+"\n");
                        Result.validate();
                        Result.paintImmediately (Result.getBounds ()); }
                        else if (TYPE_APP.contains("IPHONE")){Etape1();type="IPHONE";Result.append(IMEI_ORI+" : "+TYPE_APP+"\n");
                        Result.validate();
                        Result.paintImmediately (Result.getBounds ()); }

                    }
                    
                    if (SUCCES.equals("OUI")) {
                        
                        checkLM();
                         if (IMEI_PREC.equals(IMEI_ORI)) {}
                            else {
                            CPT_total+=1;
                            cpt_total.setText(CPT_total.toString());
                            cpt_total.update(cpt_total.getGraphics());
                            }
                        Etape2();
                    }
                    else {Result.append(IMEI_ORI+" : Connexion au site impossible\n"+"\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ());
                        
                        ok="no";
                        
                    }            
                }
                else {
                    IMEI_ORI=serie;
                    if (TYPE_APP.contains("IPOD")){type="IPOD";Result.append(IMEI_ORI+" : "+TYPE_APP+"\n");
                    Result.validate();
                    Result.paintImmediately (Result.getBounds ()); }
                        else if (TYPE_APP.contains("IPAD")){type="IPAD";Result.append(IMEI_ORI+" : "+TYPE_APP+"\n");
                        Result.validate();
                        Result.paintImmediately (Result.getBounds ()); }
                        else if (TYPE_APP.contains("IPHONE")){type="IPHONE";Result.append(IMEI_ORI+" : "+TYPE_APP+"\n");
                        Result.validate();
                        Result.paintImmediately (Result.getBounds ()); }
                    checkLM();
                    if (IMEI_PREC.equals(IMEI_ORI)) {}
                    else {
                    CPT_total+=1;
                    cpt_total.setText(CPT_total.toString());
                    cpt_total.update(cpt_total.getGraphics());
                    }
                    Etape2();
                
                }
                IMEI_PREC=IMEI_ORI;
                System.out.println(i+" "+ID+" "+serie);
                Result.update(Result.getGraphics());
            }
            /*if (SUCCES.equals("NON"))
            
                {   
                Result.append(IMEI_ORI+" : Connexion au site impossible\n"+"\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ()); 
                }*/
        }
        catch(SQLException e){
            System.err.println(e);
            java.awt.Toolkit.getDefaultToolkit().beep();
        }
        Calendar cal1 = new GregorianCalendar();
        String heure = heure_format.format(cal1.getTime());
        
        Result.append("Total traité : "+CPT_total+" | Swappés : "+CPT_swaps+" | Localisés : "+CPT_lm+" | Impossibles : "+CPT_imp+ " | Echecs : "+CPT_ech+ "\n");
        Result.append(nom+" : Heure de fin de traitement : "+heure+"\n"+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ()); 
    }
    
    
    private void Etape2 (){
        //IMEI_ORI="";
        SUCCES="NON";
        SUCCES1="OUI";
        String status_swap="";
        Integer k=1;
        
        System.out.println("Début étape2");
        if (etat.equals("Swappable")){
 /*****/           while ((SUCCES.equals("NON"))&(k<=3)&(etat.equals("Swappable"))) {
                        k+=1;
                        if (SUCCES1.equals("NON")) {
                            if (type.equals("IPHONE")){
                                Etape1();
                            }    
                            else if (type.equals("IPAD")){
                                Etape1_IPAD();
                            }
                            else {Etape1_IPOD();
                            }
         /*     */          if (SUCCES.equals("OUI")){
                            checkLM();}

                        }
         /*****/        if (etat.equals("Swappable")){      
                        demande_rep();}
                        else {SUCCES="NON";} 
                        }
            if (SUCCES.equals("OUI")) {
                status_swap="Oui";
                
                
                CPT_swaps+=1;
                cpt_swaps.setText(CPT_swaps.toString());
                cpt_swaps.update(cpt_swaps.getGraphics());
            
            }
            else {status_swap="Echec";
                if (etat.equals("Réparation ouverte")){
            Result.append(IMEI_ORI+" : vérifier cet IMEI sur le compte Apple."+"\n"+"Réparation probablement demandée mais numéro non enregistré.\n"+"\n");
                Result.validate(); 
                Result.paintImmediately (Result.getBounds ());
                CPT_ech+=1;
                cpt_ech.setText(CPT_ech.toString());
                cpt_ech.update(cpt_ech.getGraphics());
                }
            }
        }
        else {
            if (etat.equals("Localisé")){
                status_swap="LM";
                CPT_lm+=1;
                cpt_lm.setText(CPT_lm.toString());
                cpt_lm.update(cpt_lm.getGraphics());
            }              
            else if (etat.equals("Impossible")) {
                status_swap="IMPOSSIBLE";
                CPT_imp+=1;
                cpt_imp.setText(CPT_imp.toString());
                cpt_imp.update(cpt_imp.getGraphics());
            }
            else if (etat.equals("Déjà swappé")) {
                status_swap="DEJA_SWAP";
                CPT_imp+=1;
                cpt_imp.setText(CPT_imp.toString());
                cpt_imp.update(cpt_imp.getGraphics());
            }
            else if (etat.equals("Incorrect")) {
                status_swap="INCORRECT";
                CPT_imp+=1;
                cpt_imp.setText(CPT_imp.toString());
                cpt_imp.update(cpt_imp.getGraphics());
            }
            else if (etat.equals("Echec")) {
                status_swap="Echec";
                CPT_ech+=1;
                cpt_ech.setText(CPT_ech.toString());
                cpt_ech.update(cpt_ech.getGraphics());
            }
            else if (etat.equals("Réparation ouverte")) {
                status_swap="IMPOSSIBLE";
                CPT_imp+=1;
                cpt_imp.setText(CPT_imp.toString());
                cpt_imp.update(cpt_imp.getGraphics());
            }
            
        }
        if (single!=("oui")){
        String requete ="UPDATE liste_swap SET status='"+status_swap+"' WHERE IMEI_ORI='"+IMEI_ORI+"'";
        try {
        System.out.println(requete);
        
        if (LOCAL.equals("OUI")) {stm1=maConnexion1.get_connexion().createStatement();}
            else {stm1=maConnexion.get_connexion().createStatement();}    
        //stm1=maConnexion.get_connexion().createStatement();
        stm1.executeUpdate(requete);}
        catch (SQLException e){
            System.err.println(e);
            //java.awt.Toolkit.getDefaultToolkit().beep();
        }
        
        }
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        liste();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void eraselogActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraselogActionPerformed
        Result.setText("");
        Result.paintImmediately (Result.getBounds ()); 
        cpt_total.setText("0");
        cpt_swaps.setText("0");
        cpt_lm.setText("0");
        cpt_imp.setText("0");
        cpt_ech.setText("0");
        CPT_total=0;
        CPT_swaps=0;
        CPT_lm=0;
        CPT_imp=0;
        IMEI_PREC="";
        
    }//GEN-LAST:event_eraselogActionPerformed

    private void idComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_idComponentHidden
        // TODO add your handling code here:
    }//GEN-LAST:event_idComponentHidden

    private void testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testActionPerformed
        if (test.getSelectedItem().equals("CLICK")){
            sendkeys.setEnabled(false);
        }
        else if (test.getSelectedItem().equals("SENDKEYS"))
        {sendkeys.setEnabled(true);
        }
        else if (test.getSelectedItem().equals("GETTEXT"))
        {sendkeys.setEnabled(false);
        }
    }//GEN-LAST:event_testActionPerformed

    private void combotypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combotypeActionPerformed
        if (test.getSelectedItem().equals("IPHONE")){
            type="IPHONE";
        }
        else if (test.getSelectedItem().equals("IPAD"))
        {type="IPAD";
            
        }
        else {type="IPOD";
        
        }
    }//GEN-LAST:event_combotypeActionPerformed

    private void expressionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expressionActionPerformed
       
        
    }//GEN-LAST:event_expressionActionPerformed

    private void expressionKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_expressionKeyPressed
        String temp=expression.getText();
         if((evt.getKeyCode()==KeyEvent.VK_ENTER)&(temp.equals("debug")))
        {
             expression.setText("");
             test.setVisible(true);
             testbutton.setVisible(true);
            sendkeys.setVisible(true);
            name.setVisible(true);
            classname.setVisible(true);
            tagname.setVisible(true);
            xpath.setVisible(true);
            partial.setVisible(true);
            css.setVisible(true);
            id.setVisible(true);
            //jToggleButton1.setVisible(true);
            
        }
         else if((evt.getKeyCode()==KeyEvent.VK_ENTER)&(temp.equals("hide")))
        {
             expression.setText("");
             test.setVisible(false);
             testbutton.setVisible(false);
            sendkeys.setVisible(false);
            name.setVisible(false);
            classname.setVisible(false);
            tagname.setVisible(false);
            xpath.setVisible(false);
            partial.setVisible(false);
            css.setVisible(false);
            id.setVisible(false);
            //jToggleButton1.setVisible(false);
        }
    }//GEN-LAST:event_expressionKeyPressed

    private void logActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logActionPerformed
        String s=expression1.getText();
        /*if (nom.equals("")) {
            
            s = expression1.getText();
        }
        else {s=nom;}*/
        
        if (s.equals("")) {
            JOptionPane.showMessageDialog(null,"Saisir un nom de fichier");
            java.awt.Toolkit.getDefaultToolkit().beep();
        }
        else {
            try {
                File f = new File(s+".txt");
                FileWriter fw = new FileWriter(f);
                Result.write(fw);
                fw.close();
            }
            catch(IOException ioe) {
            System.out.println("Exception Caught : " +ioe.getMessage());
            }
        }



    }//GEN-LAST:event_logActionPerformed

    private void expression1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expression1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_expression1ActionPerformed

    private void motif1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motif1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motif1ActionPerformed

    private void motif2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motif2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motif2ActionPerformed

    private void motif3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motif3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motif3ActionPerformed

    private void motif4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motif4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motif4ActionPerformed

    private void motif5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motif5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motif5ActionPerformed

    private void motif6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motif6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motif6ActionPerformed

    private void motif7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motif7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motif7ActionPerformed

    private void motif8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motif8ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motif8ActionPerformed

    private void motif7txtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motif7txtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motif7txtActionPerformed

    private void carte1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carte1MouseClicked
        if(carte1.isSelected()==true)
        {CARTE = "new";
        nom_carte.setText("");
        code_carte.setText("");
        mois_carte.setSelectedIndex(0);
            annee_carte.setSelectedIndex(0);
            if (carte0.isSelected()==true){
                carte0.doClick();
            }
        }
        else if (carte0.isSelected()==false){
            carte0.doClick();
            CARTE="default";
            nom_carte.setText(Carte0nom);
            code_carte.setText("****");
            mois_carte.setSelectedIndex(0);
            annee_carte.setSelectedIndex(0);
        }
    }//GEN-LAST:event_carte1MouseClicked

    private void carte1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carte1ActionPerformed

    }//GEN-LAST:event_carte1ActionPerformed

    private void carte0MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_carte0MouseClicked
        if(carte0.isSelected()==true)
        {CARTE="default";
        nom_carte.setText(Carte0nom);
        code_carte.setText("****");
        mois_carte.setSelectedIndex(0);
            annee_carte.setSelectedIndex(0);
            if (carte1.isSelected()==true){
                carte1.doClick();
            }
        }
        else if (carte1.isSelected()==false){
            carte1.doClick();
            CARTE="new";
            nom_carte.setText("");
            code_carte.setText("");
            mois_carte.setSelectedIndex(0);
            annee_carte.setSelectedIndex(0);
        }

    }//GEN-LAST:event_carte0MouseClicked

    private void carte0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_carte0ActionPerformed

    }//GEN-LAST:event_carte0ActionPerformed

    private void nom_carteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_nom_carteFocusGained
        nom_carte.setText("");
    }//GEN-LAST:event_nom_carteFocusGained

    private void nom_carteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nom_carteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nom_carteActionPerformed

    private void num_carteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_num_carteFocusGained
        num_carte.setText("");
    }//GEN-LAST:event_num_carteFocusGained

    private void code_carteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_code_carteFocusGained
        code_carte.setText("");
    }//GEN-LAST:event_code_carteFocusGained

    private void code_carteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_code_carteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_code_carteActionPerformed

    private void compte0MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compte0MouseClicked
         if(compte0.isSelected()==true)
        {COMPTE="default";
        login.setText(Login0);
        password.setText(Password0);
        telephone.setText(Telephone0);
        societe.setText(Societe0);
        
            if (compte1.isSelected()==true){
                compte1.doClick();
            }
        }
        else if (compte1.isSelected()==false){
            compte1.doClick();
            COMPTE="new";
            login.setText("");
        password.setText("");
        telephone.setText("");
        societe.setText("");
        }
    }//GEN-LAST:event_compte0MouseClicked

    private void compte1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compte1MouseClicked
          if(compte1.isSelected()==true)
        {COMPTE="new";
            if (compte0.isSelected()==true){
                compte0.doClick();
                login.setText("");
        password.setText("");
        telephone.setText("");
        societe.setText("");
            }
        }
        else if (compte0.isSelected()==false){
            compte0.doClick();
            COMPTE="default";
            login.setText(Login0);
        password.setText(Password0);
        telephone.setText(Telephone0);
        societe.setText(Societe0);
        }
    }//GEN-LAST:event_compte1MouseClicked

    private void ResultCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_ResultCaretUpdate
        // TODO add your handling code here:
    }//GEN-LAST:event_ResultCaretUpdate

    private void passwordFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_passwordFocusGained
        password.setText("");
    }//GEN-LAST:event_passwordFocusGained

    private void loginFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_loginFocusGained
        login.setText("");
    }//GEN-LAST:event_loginFocusGained

    private void testbuttonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testbuttonMouseClicked
        
        /*Result.append(single+"\n");
        Result.validate(); 
        Result.paintImmediately (Result.getBounds ()); */
        String exp = expression.getText();
        driver.switchTo().frame(exp);
        
    }//GEN-LAST:event_testbuttonMouseClicked

    private void testbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testbuttonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_testbuttonActionPerformed

    private void motif7txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_motif7txtFocusGained
    motif7txt.setText("");
    }//GEN-LAST:event_motif7txtFocusGained

    private void motif8txtFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_motif8txtFocusGained
        motif8txt.setText("");
    }//GEN-LAST:event_motif8txtFocusGained

    private void telephoneFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_telephoneFocusGained
        telephone.setText("");
    }//GEN-LAST:event_telephoneFocusGained

    private void societeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_societeFocusGained
        societe.setText("");
    }//GEN-LAST:event_societeFocusGained

    private void compte0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compte0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_compte0ActionPerformed

    private void operateurFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_operateurFocusGained
        operateur.setText("");
    }//GEN-LAST:event_operateurFocusGained

    private void BDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDDActionPerformed
        /*if(BDD.isSelected()==true){single="non"; BDD_local.setEnabled(true);choix_con_BDD();}
        else if (BDD.isSelected()==false){single="oui";BDD_local.setEnabled(false);
            //System.out.println(LOCAL);
        }*/
    }//GEN-LAST:event_BDDActionPerformed

    private void BDDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BDDMouseClicked
           if(BDD.isSelected()==true){single="non";BDD_local.setEnabled(true);choix_con_BDD();}
        else if (BDD.isSelected()==false){single="oui";
            BDD_local.setEnabled(false);
            //System.out.println(LOCAL);
            
        }
    }//GEN-LAST:event_BDDMouseClicked

    private void IMEIMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_IMEIMouseClicked
        IMEI.selectAll();
    }//GEN-LAST:event_IMEIMouseClicked

    private void expression1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_expression1MouseClicked
        expression1.selectAll();
    }//GEN-LAST:event_expression1MouseClicked

    private void choix_con_BDD(){
        try {
        if(BDD_local.isSelected()==true)
            {LOCAL="OUI";
            maConnexion1=new connexion1();
            stm=maConnexion1.get_connexion().createStatement();}
        else {LOCAL="NON";
            maConnexion=new connexion();
            stm=maConnexion.get_connexion().createStatement();}
        System.out.println("Local : "+ LOCAL);
        }
        catch (SQLException e){
            System.err.println(e);
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Erreur de connexion à la BDD");
        }
    }
    
    private void BDD_localMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BDD_localMouseClicked
       try {
        if(BDD_local.isSelected()==true)
            {LOCAL="OUI";
            maConnexion1=new connexion1();
            stm=maConnexion1.get_connexion().createStatement();}
        else {LOCAL="NON";
            maConnexion=new connexion();
            stm=maConnexion.get_connexion().createStatement();}
        System.out.println("Local : "+ LOCAL);
        }
        catch (SQLException e){
            System.err.println(e);
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Erreur de connexion à la BDD");
        }
    }//GEN-LAST:event_BDD_localMouseClicked

    private void BDD_localActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BDD_localActionPerformed
       /*  try {
        if(BDD_local.isSelected()==true)
            {LOCAL="OUI";
            maConnexion1=new connexion1();
            stm=maConnexion1.get_connexion().createStatement();}
        else {LOCAL="NON";
            maConnexion=new connexion();
            stm=maConnexion.get_connexion().createStatement();}
        System.out.println("Local : "+ LOCAL);
        }
        catch (SQLException e){
            System.err.println(e);
            java.awt.Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, "Erreur de connexion à la BDD");
        }*/
    }//GEN-LAST:event_BDD_localActionPerformed
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Recherche_IMEI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Recherche_IMEI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Recherche_IMEI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Recherche_IMEI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Swap_ENGINE().setVisible(true);
                
                
                  
            }
        });
    
    }
    /**
     * @param args the command line arguments
     */
    
    
     private void browser_IPOD() {
        
        Integer vit=vitesse.getValue();
        Integer attente=15+vit;
        driver.get("https://getsupport.apple.com/GetSASO?sn=CCQLPWH1F4JW&locale=fr_FR");/*imei locateme*/
        wait0 = (new WebDriverWait(driver, attente+5));
        wait1 = (new WebDriverWait(driver, attente));
        }
     
     private void browser_IPAD() {
        
        Integer vit=vitesse.getValue();
        Integer attente=15+vit;
        driver.get("https://getsupport.apple.com/GetSASO?sn=DMPLTAN7FKYC&locale=fr_FR");/*imei locateme*/
        wait0 = (new WebDriverWait(driver, attente+5));
        wait1 = (new WebDriverWait(driver, attente));
        }
    
    private void browser() {
         
        //driver.manage().timeouts().implicitlyWait(15, TimeUnit.SECONDS);
        //baseUrl = "https://selfsolve.apple.com/";
        Integer vit=vitesse.getValue();
        Integer attente=15+vit;
        //driver.get("https://getsupport.apple.com/GetSASO?locale=fr_FR&sn=358688053658696"); /*imei OK*/
        //driver.get("https://getsupport.apple.com/GetSASO?locale=fr_FR&sn=013629008816317");/*imei locateme*/
        //driver.get("https://getsupport.apple.com/GetSASO?locale=fr_FR&sn=357999058209083");/*imei locateme*/
        //driver.get("https://getsupport.apple.com/GetSASO?sn=C39N9588G5MW&locale=fr_FR");/*imei locateme*/
        //driver.get("https://getsupport.apple.com/GetSASO?sn=013629008816317&locale=fr_FR");/*imei locateme*/
        driver.get("https://getsupport.apple.com/GetSASO?sn=352069061286125&locale=fr_FR");/*imei locateme*/
        wait0 = (new WebDriverWait(driver, attente+5));
        wait1 = (new WebDriverWait(driver, attente));
        
        //driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);

        //https://getsupport.apple.com/GetSASO?sn=CCQLPWH1F4JW&locale=fr_FR //IPOD
        
     
        /*(new WebDriverWait(driver, 10)).until(new ExpectedCondition<Boolean>() {
            public Boolean apply(WebDriver d) {
                return d.getTitle().toLowerCase().startsWith("cheese!");
            }
        });*/

        // Should see: "cheese! - Google Search"
        //System.out.println("Page title is: " + driver.getTitle());
        
        //Close the browser
        //driver.quit();*/
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton BDD;
    private javax.swing.JRadioButton BDD_local;
    private javax.swing.JButton Bouton_Browser;
    private javax.swing.JButton Bouton_Test_suite;
    private javax.swing.JButton Bouton_etape1;
    private javax.swing.JTextField IMEI;
    private javax.swing.JTextArea Result;
    private javax.swing.JComboBox annee_carte;
    private javax.swing.JRadioButton carte0;
    private javax.swing.JRadioButton carte1;
    private javax.swing.JButton classname;
    private javax.swing.JTextField code_carte;
    private javax.swing.JComboBox combotype;
    private javax.swing.JRadioButton compte0;
    private javax.swing.JRadioButton compte1;
    private javax.swing.JTextField cpt_ech;
    private javax.swing.JTextField cpt_imp;
    private javax.swing.JTextField cpt_lm;
    private javax.swing.JTextField cpt_swaps;
    private javax.swing.JTextField cpt_total;
    private javax.swing.JButton css;
    private javax.swing.JButton eraselog;
    private javax.swing.JTextField expression;
    private javax.swing.JTextField expression1;
    private javax.swing.JButton id;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton log;
    private javax.swing.JTextField login;
    private javax.swing.JComboBox mois_carte;
    private javax.swing.JRadioButton motif1;
    private javax.swing.JRadioButton motif2;
    private javax.swing.JRadioButton motif3;
    private javax.swing.JRadioButton motif4;
    private javax.swing.JRadioButton motif5;
    private javax.swing.JRadioButton motif6;
    private javax.swing.JRadioButton motif7;
    private javax.swing.JTextField motif7txt;
    private javax.swing.JRadioButton motif8;
    private javax.swing.JTextField motif8txt;
    private javax.swing.JButton name;
    private javax.swing.JTextField nom_carte;
    private javax.swing.JPasswordField num_carte;
    private javax.swing.JTextField operateur;
    private javax.swing.JButton partial;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField sendkeys;
    private javax.swing.JTextField societe;
    private javax.swing.JButton tagname;
    private javax.swing.JTextField telephone;
    private javax.swing.JComboBox test;
    private javax.swing.JButton testbutton;
    private javax.swing.JSlider vitesse;
    private javax.swing.JButton xpath;
    // End of variables declaration//GEN-END:variables
}
